{
	"info": {
		"_postman_id": "99dc7f0c-7bfd-415e-9155-dd241f8d9b1d",
		"name": "IdeaCenterAPITesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26949536"
	},
	"item": [
		{
			"name": "Login and Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response body includes the attributes email, password, and accessToken\", function () {\r",
							"pm.expect(responseData.email).to.exist.and.not.to.be.empty;\r",
							"pm.expect(responseData.password).to.exist.and.not.to.be.empty;\r",
							"pm.expect(responseData.accessToken).to.exist.and.not.to.be.empty;\r",
							"\r",
							"pm.collectionVariables.set(\"token\", responseData.accessToken);\r",
							"\r",
							"    //  var responseBody = pm.response.json();\r",
							"    //  pm.expect(responseBody).to.be.an('object');\r",
							"    //  pm.expect(responseBody).to.have.property('email');\r",
							"    //  pm.expect(responseBody).to.have.property('password');\r",
							"    //  pm.expect(responseBody).to.have.property('accessToken');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\": \"ani789@abv.bg\",\r\n\"password\": \"789456\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/User/Authentication",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"User",
						"Authentication"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a New Idea",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomNumber = Math.floor(Math.random() * 1000);\r",
							"var randomTitle = \"randomTitle\" + randomNumber;\r",
							"\r",
							"pm.collectionVariables.set(\"randomTitleVar\", randomTitle);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code status is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"    //pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response message is 'Successfully created!'\", function () {\r",
							"pm.expect(responseData.msg).to.equal(\"Successfully created!\");\r",
							"});\r",
							"\r",
							"const createdIdeaTitle = pm.collectionVariables.get(\"randomTitleVar\");\r",
							"\r",
							"pm.test(\"Idea title and description are correct\", function () {\r",
							"pm.expect(responseData.idea.title).to.equal(createdIdeaTitle);\r",
							"pm.expect(responseData.idea.description).to.equal(\"Description for \" + createdIdeaTitle);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{randomTitleVar}}\",\r\n    \"description\": \"Description for {{randomTitleVar}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/Idea/Create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"Create"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all Ideas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"pm.expect(pm.response.code).to.equal(200);\r",
							"// pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Respponse is an array and contains at least one item\", function () {\r",
							"pm.expect(responseData).to.be.an(\"array\").that.has.length.above(0);\r",
							"\r",
							"    //  pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
							"    // pm.expect(Array.isArray(pm.response.json())).to.be.true;\r",
							"    // pm.expect(pm.response.json().length).to.be.above(0);\r",
							"    // pm.expect(responseData.length).to.be.greaterThan(0)\r",
							"});\r",
							"\r",
							"const lastIdeaId = responseData[responseData.length - 1].id;\r",
							"pm.collectionVariables.set(\"lastIdeaId\", lastIdeaId);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/Idea/All",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"All"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit the Last Idea",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"// pm.expect(pm.response.code).to.equal(200);\r",
							"pm.expect(pm.response).to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response message is 'Edited successfully'\", function () {\r",
							"     pm.expect(responseData.msg).to.equal(\"Edited successfully\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response matches the edited title\", function () {\r",
							"pm.expect(responseData.idea).to.have.property(\"title\").that.equal(\"Edited Idea Title\");\r",
							"// pm.expect(responseData.idea.title).to.equal(\"Edited Idea Title\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"Edited Idea Title\", \r\n\"description\": \"Edited description\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/Idea/Edit?ideaId={{lastIdeaId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"Edit"
					],
					"query": [
						{
							"key": "ideaId",
							"value": "{{lastIdeaId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the Edited Idea",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.text();\r",
							"\r",
							"pm.test(\"Response body is a string\", function () {\r",
							"    pm.expect(responseData).is.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is 'The idea is deleted!'\", function () {\r",
							"pm.expect(responseData).to.contain(\"The idea is deleted!\");\r",
							"// pm.expect(responseData).is.equal(\"The idea is deleted!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"Edited Idea Title\", \r\n\"description\": \"Edited description\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/Idea/Delete?ideaId={{lastIdeaId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"Delete"
					],
					"query": [
						{
							"key": "ideaId",
							"value": "{{lastIdeaId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://softuni-qa-loadbalancer-2137572849.eu-north-1.elb.amazonaws.com:84",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "randomTitleVar",
			"value": ""
		},
		{
			"key": "lastIdeaId",
			"value": ""
		}
	]
}